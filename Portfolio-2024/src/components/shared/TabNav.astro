---
import TabButton from "./TabButton.astro";
import TabPage from "./TabPage.astro";


interface Props {
    titles: Array<string>;
    contents: Array<{ title: string; subtitle: string; paragraphs: string[]; key: string;}>
}

const { titles , contents} = Astro.props;
---

<tab-nav>

    <div class="expirence-tab--container__main">
        <div class="expirence-tab--header">
            <TabButton label={titles[0]}></TabButton>
            <TabButton label={titles[1]}></TabButton>
            <TabButton label={titles[2]}></TabButton>
            <TabButton label={titles[3]}></TabButton>
            <TabButton label={titles[4]} active={true}></TabButton>
        </div>
    
        <div class="expirence-tab--pages">
            <TabPage content={contents[0]}></TabPage>
            <TabPage content={contents[1]}></TabPage>
            <TabPage content={contents[2]}></TabPage>
            <TabPage content={contents[3]}></TabPage>
            <TabPage content={contents[4]}></TabPage>
        </div>
    </div>
</tab-nav>

<style>
    .expirence-tab--container__main {
        display: block;
    }
    .expirence-tab--header {
        display: flex;
        justify-content: center;

        margin-bottom: 40px;
    }
    .expirence-tab--pages {
        padding: 10px 10px;
    }

    @media (max-width: 576px) {
        .expirence-tab--header {
            flex-direction: column;
            align-items: center;
        }

        .expirence-tab--container__main {
            display: flex;
            justify-content: center;

            gap: 10px;
        }
    }
</style>



<script>
    class TabNav extends HTMLElement {

        tabs: Array<HTMLButtonElement>;
        contents: Array<HTMLDivElement>;

        constructor() {
            super();
            this.tabs = Array.from(this.querySelectorAll(".expirence-tab--btn")) as Array<HTMLButtonElement>;
            this.contents = Array.from(this.querySelectorAll(".expirence-tab--content")) as Array<HTMLDivElement>;
            
            this.onInit();
        }
        
        onInit() {
            this.setTab();
            this.handlerClick();
        }

        setTab() {
            this.tabs.forEach(tab => {
                if (tab.classList.contains("active")) {
                    this.showContents(tab.textContent);
                }
            })
        }

        handlerClick() {
            this.tabs.forEach((tab) => {
                tab.addEventListener("click", () => {
                    this.activatedTab(tab);
                    this.showContents(tab.textContent);
                });
            });
        }

        activatedTab(tab: HTMLButtonElement) {

            this.tabs.forEach((tab: HTMLButtonElement) => {
                tab.classList.remove("active");
            });

            tab.classList.add("active");
        }

        showContents(id: string | null) {

            this.contents.forEach((content) => {
                content.style.display = "none";
                
                if (content.id === id) {
                    content.style.display = "block";
                }
            });
        }
    }

    customElements.define("tab-nav", TabNav);
</script>
